import { Injectable } from '@angular/core';
import { Oauth2Service } from './oauth2.service';
import { Oauth2AccessToken } from './lib/oauth2.access-token';
import { Http, Request, RequestOptionsArgs, Headers, Response} from '@angular/http';
import { Observable } from 'rxjs/Rx';

export class AuthHttpException implements Error {
    public name: 'AuthHttpException';
    public message: string;
    constructor(message?: string) {
        if (message) {
            this.message = message;
        }
    }
}

@Injectable()
export class Oauth2AuthHttp {
    private token: any = null;
    private params = {
        headerKey: 'Authorization',
        headerValuePrefix: 'Bearer ',
        headerValueSuffix: '',
        useValue: 'access_token',
        mandatory: true
    };

    constructor(private http: Http) {}

    public setOptions(params: any) {
        this.params = params;
    }

    /**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {@link BaseRequestOptions} before performing the request.
     */
    public request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.request(url, options);
    }
    /**
     * Performs a request with `get` http method.
     */
    public get(url: string, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.get(url, options);
    }
    /**
     * Performs a request with `post` http method.
     */
    public post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.post(url, body, options);
    }
    /**
     * Performs a request with `put` http method.
     */
    public put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.put(url, body, options);
    }
    /**
     * Performs a request with `delete` http method.
     */
    public delete(url: string, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.delete(url, options);
    }
    /**
     * Performs a request with `patch` http method.
     */
    public patch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.patch(url, body, options);
    }
    /**
     * Performs a request with `head` http method.
     */
    public head(url: string, options?: RequestOptionsArgs): Observable<Response> {
        options = this.setHeaders(options);
        return this.http.head(url, options);
    }


    private setHeaders(options: any) {
        this.token = Oauth2Service.getStorage().getJson(Oauth2Service.STORAGE_KEY_TOKEN);
        
        if ( this.token ) {
            if (!options) {
                options = { headers: new Headers()};
            } else if (! options.headers ) {
                options.headers = new Headers();
            }
            options.headers.append(
                this.params.headerKey,
                this.params.headerValuePrefix + this.token[this.params.useValue] + this.params.headerValueSuffix
            );
            return options;
        } else if (! this.params.mandatory) {
            return options;
        } else {
            throw new AuthHttpException('User not logged in');
        }
    }
}
